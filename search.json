[
  {
    "objectID": "reference/Smoother.html",
    "href": "reference/Smoother.html",
    "title": "Smoother",
    "section": "",
    "text": "Smoother(self, method='dct_smooth_regression', **kwargs)\nA smoother function factory\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\nThe smoothing method to use. Defaults to “dct_smooth”. Can be a custom smoother such that it takes a 1D array as input and returns a Smoothed class.\n'dct_smooth_regression'\n\n\nkwargs\n\nAny additional arguments or parameters for the method.\n{}\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nsmooth\nApply the smoother function to the data\n\n\n\n\n\nSmoother.smooth(x)\nApply the smoother function to the data\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\na 1D numpy array\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSmoothed\nA Smoothed object"
  },
  {
    "objectID": "reference/Smoother.html#parameters",
    "href": "reference/Smoother.html#parameters",
    "title": "Smoother",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\nThe smoothing method to use. Defaults to “dct_smooth”. Can be a custom smoother such that it takes a 1D array as input and returns a Smoothed class.\n'dct_smooth_regression'\n\n\nkwargs\n\nAny additional arguments or parameters for the method.\n{}"
  },
  {
    "objectID": "reference/Smoother.html#methods",
    "href": "reference/Smoother.html#methods",
    "title": "Smoother",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nsmooth\nApply the smoother function to the data\n\n\n\n\n\nSmoother.smooth(x)\nApply the smoother function to the data\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\na 1D numpy array\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSmoothed\nA Smoothed object"
  },
  {
    "objectID": "reference/processors.losses.lmse.html",
    "href": "reference/processors.losses.lmse.html",
    "title": "processors.losses.lmse",
    "section": "",
    "text": "processors.losses.lmse(formants, smoothed, axis=1)\nsummary\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nnp.ndarray\ndescription\nrequired\n\n\nsmoothed\nnp.ndarray\ndescription\nrequired\n\n\naxis\nint\ndescription. Defaults to 1.\n1\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnp.ndarray\nnp.ndarray: description"
  },
  {
    "objectID": "reference/processors.losses.lmse.html#parameters",
    "href": "reference/processors.losses.lmse.html#parameters",
    "title": "processors.losses.lmse",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nformants\nnp.ndarray\ndescription\nrequired\n\n\nsmoothed\nnp.ndarray\ndescription\nrequired\n\n\naxis\nint\ndescription. Defaults to 1.\n1"
  },
  {
    "objectID": "reference/processors.losses.lmse.html#returns",
    "href": "reference/processors.losses.lmse.html#returns",
    "title": "processors.losses.lmse",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnp.ndarray\nnp.ndarray: description"
  },
  {
    "objectID": "reference/process_directory.html",
    "href": "reference/process_directory.html",
    "title": "process_directory",
    "section": "",
    "text": "process_directory(path, min_max_formant=4000, max_max_formant=7000, nstep=20, n_formants=4, window_length=0.05, time_step=0.002, pre_emphasis_from=50, smoother=Smoother(), loss_fun=Loss(), agg_fun=Agg())\nGiven a path to a directoy of audio files, process them all.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the directory to process.\nrequired\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.05\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[CandidateTracks]\nA list of CandidateTracks objects."
  },
  {
    "objectID": "reference/process_directory.html#parameters",
    "href": "reference/process_directory.html#parameters",
    "title": "process_directory",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the directory to process.\nrequired\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.05\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()"
  },
  {
    "objectID": "reference/process_directory.html#returns",
    "href": "reference/process_directory.html#returns",
    "title": "process_directory",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[CandidateTracks]\nA list of CandidateTracks objects."
  },
  {
    "objectID": "reference/OneTrack.html",
    "href": "reference/OneTrack.html",
    "title": "OneTrack",
    "section": "",
    "text": "OneTrack(self, maximum_formant, sound, n_formants=4, window_length=0.025, time_step=0.002, pre_emphasis_from=50, smoother=Smoother(), loss_fun=Loss(), agg_fun=Agg())\nA single formant track.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsound\npm.Sound\nA parselmouth.Sound object.\nrequired\n\n\nmaximum_formant\nfloat\nmax formant\nrequired\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmaximum_formant\nfloat\nThe max formant\n\n\ntime_domain\nnp.array\nThe time domain of the formant estimates\n\n\nformants\nnp.ndarray\nA (formants, time) array of values. The formants as initially estimated by praat-parselmouth\n\n\nn_measured_formants\nint\nThe total number of formants for which formant tracks were estimatable\n\n\nsmoothed_formants\nnp.ndarray\nThe smoothed formant values, using the method passed to smoother.\n\n\nparameters\nnp.ndarray\nThe smoothing parameters.\n\n\nsmooth_error\nfloat\nThe error term between formants and smoothed formants.\n\n\nfile_name\nstr\nThe filename of the audio file, if set.\n\n\ninterval\naligned_textgrid.SequenceInterval\nThe textgrid interval of the sound, if set.\n\n\nid\nstr\nThe interval id of the sound, if set.\n\n\ngroup\nstr\nThe tier group name of the sound, if set.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nspectrogram\nGenerate a spectrogram with tracked formants overlaid\n\n\nto_df\nOutput either the formant values or the formant smoothing parameters as a polars dataframe\n\n\n\n\n\nOneTrack.spectrogram(**kwargs)\nGenerate a spectrogram with tracked formants overlaid\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nint\nNumber of formants to plot. Defaults to 3.\nrequired\n\n\nmaximum_frequency\nint\nMaximum frequency for the spectrogram. Defaults to 3500.\nrequired\n\n\ntracks\nbool\nWhether or not to plot the tracks. Defaults to True.\nrequired\n\n\ndynamic_range\nint\nDynamic range of the spectrogram. Defaults to 60.\nrequired\n\n\nfigsize\ntuple\nFigure size. Defaults to (8,5).\nrequired\n\n\ncolor_scale\nstr\nColor scale for the spectrogram. Defaults to “Greys”.\nrequired\n\n\n\n\n\n\n\nOneTrack.to_df(output='formants')\nOutput either the formant values or the formant smoothing parameters as a polars dataframe\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noutput\nLiteral[‘formants’, ‘param’]\nWhether to output the formants or the smoothing parameters. Defaults to “formants”.\n'formants'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA polars.DataFrame"
  },
  {
    "objectID": "reference/OneTrack.html#parameters",
    "href": "reference/OneTrack.html#parameters",
    "title": "OneTrack",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsound\npm.Sound\nA parselmouth.Sound object.\nrequired\n\n\nmaximum_formant\nfloat\nmax formant\nrequired\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()"
  },
  {
    "objectID": "reference/OneTrack.html#attributes",
    "href": "reference/OneTrack.html#attributes",
    "title": "OneTrack",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nmaximum_formant\nfloat\nThe max formant\n\n\ntime_domain\nnp.array\nThe time domain of the formant estimates\n\n\nformants\nnp.ndarray\nA (formants, time) array of values. The formants as initially estimated by praat-parselmouth\n\n\nn_measured_formants\nint\nThe total number of formants for which formant tracks were estimatable\n\n\nsmoothed_formants\nnp.ndarray\nThe smoothed formant values, using the method passed to smoother.\n\n\nparameters\nnp.ndarray\nThe smoothing parameters.\n\n\nsmooth_error\nfloat\nThe error term between formants and smoothed formants.\n\n\nfile_name\nstr\nThe filename of the audio file, if set.\n\n\ninterval\naligned_textgrid.SequenceInterval\nThe textgrid interval of the sound, if set.\n\n\nid\nstr\nThe interval id of the sound, if set.\n\n\ngroup\nstr\nThe tier group name of the sound, if set."
  },
  {
    "objectID": "reference/OneTrack.html#methods",
    "href": "reference/OneTrack.html#methods",
    "title": "OneTrack",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nspectrogram\nGenerate a spectrogram with tracked formants overlaid\n\n\nto_df\nOutput either the formant values or the formant smoothing parameters as a polars dataframe\n\n\n\n\n\nOneTrack.spectrogram(**kwargs)\nGenerate a spectrogram with tracked formants overlaid\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nint\nNumber of formants to plot. Defaults to 3.\nrequired\n\n\nmaximum_frequency\nint\nMaximum frequency for the spectrogram. Defaults to 3500.\nrequired\n\n\ntracks\nbool\nWhether or not to plot the tracks. Defaults to True.\nrequired\n\n\ndynamic_range\nint\nDynamic range of the spectrogram. Defaults to 60.\nrequired\n\n\nfigsize\ntuple\nFigure size. Defaults to (8,5).\nrequired\n\n\ncolor_scale\nstr\nColor scale for the spectrogram. Defaults to “Greys”.\nrequired\n\n\n\n\n\n\n\nOneTrack.to_df(output='formants')\nOutput either the formant values or the formant smoothing parameters as a polars dataframe\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noutput\nLiteral[‘formants’, ‘param’]\nWhether to output the formants or the smoothing parameters. Defaults to “formants”.\n'formants'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA polars.DataFrame"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "functions\n\n\n\nprocess_audio_file\nGiven the path to a single audio file, return a candidates track object.\n\n\nprocess_directory\nGiven a path to a directoy of audio files, process them all.\n\n\nprocess_audio_textgrid\nProcess an audio and TextGrid file together.\n\n\n\n\n\n\nClasses\n\n\n\nOneTrack\nA single formant track.\n\n\nCandidateTracks\nA class for candidate tracks for a single formant\n\n\n\n\n\n\nSmoother\n\n\n\nSmoother\nA smoother function factory\n\n\nprocessors.smoothers.Smoothed\nSmooothed formant tracks\n\n\nprocessors.smoothers.dct_smooth\nA DCT Smoother\n\n\nprocessors.smoothers.dct_smooth_regression\nA DCT Smoother using regression\n\n\n\n\n\n\nLosses\n\n\n\nLoss\nsummary\n\n\nprocessors.losses.lmse\nsummary\n\n\nprocessors.losses.mse\nsummary\n\n\n\n\n\n\nAggs\n\n\n\nAgg\nsummary\n\n\nprocessors.aggs.agg_sum\nSum the error"
  },
  {
    "objectID": "reference/index.html#processing-functions",
    "href": "reference/index.html#processing-functions",
    "title": "Function reference",
    "section": "",
    "text": "functions\n\n\n\nprocess_audio_file\nGiven the path to a single audio file, return a candidates track object.\n\n\nprocess_directory\nGiven a path to a directoy of audio files, process them all.\n\n\nprocess_audio_textgrid\nProcess an audio and TextGrid file together."
  },
  {
    "objectID": "reference/index.html#classes",
    "href": "reference/index.html#classes",
    "title": "Function reference",
    "section": "",
    "text": "Classes\n\n\n\nOneTrack\nA single formant track.\n\n\nCandidateTracks\nA class for candidate tracks for a single formant"
  },
  {
    "objectID": "reference/index.html#smoothers",
    "href": "reference/index.html#smoothers",
    "title": "Function reference",
    "section": "",
    "text": "Smoother\n\n\n\nSmoother\nA smoother function factory\n\n\nprocessors.smoothers.Smoothed\nSmooothed formant tracks\n\n\nprocessors.smoothers.dct_smooth\nA DCT Smoother\n\n\nprocessors.smoothers.dct_smooth_regression\nA DCT Smoother using regression"
  },
  {
    "objectID": "reference/index.html#losses",
    "href": "reference/index.html#losses",
    "title": "Function reference",
    "section": "",
    "text": "Losses\n\n\n\nLoss\nsummary\n\n\nprocessors.losses.lmse\nsummary\n\n\nprocessors.losses.mse\nsummary"
  },
  {
    "objectID": "reference/index.html#aggs",
    "href": "reference/index.html#aggs",
    "title": "Function reference",
    "section": "",
    "text": "Aggs\n\n\n\nAgg\nsummary\n\n\nprocessors.aggs.agg_sum\nSum the error"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth.html",
    "href": "reference/processors.smoothers.dct_smooth.html",
    "title": "processors.smoothers.dct_smooth",
    "section": "",
    "text": "processors.smoothers.dct_smooth(x, order=5)\nA DCT Smoother\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\nA 1D array of values to smooth.\nrequired\n\n\norder\nint\nDCT Order. Defaults to 5.\n5\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSmoothed\nSee Smoothed"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth.html#parameters",
    "href": "reference/processors.smoothers.dct_smooth.html#parameters",
    "title": "processors.smoothers.dct_smooth",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\nA 1D array of values to smooth.\nrequired\n\n\norder\nint\nDCT Order. Defaults to 5.\n5"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth.html#returns",
    "href": "reference/processors.smoothers.dct_smooth.html#returns",
    "title": "processors.smoothers.dct_smooth",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nSmoothed\nSee Smoothed"
  },
  {
    "objectID": "reference/processors.aggs.agg_sum.html",
    "href": "reference/processors.aggs.agg_sum.html",
    "title": "processors.aggs.agg_sum",
    "section": "",
    "text": "processors.aggs.agg_sum\nprocessors.aggs.agg_sum(error, axis=0)\nSum the error"
  },
  {
    "objectID": "reference/process_audio_file.html",
    "href": "reference/process_audio_file.html",
    "title": "process_audio_file",
    "section": "",
    "text": "process_audio_file(path, xmin=0, xmax=None, min_max_formant=4000, max_max_formant=7000, nstep=20, n_formants=4, window_length=0.025, time_step=0.002, pre_emphasis_from=50, smoother=Smoother(), loss_fun=Loss(), agg_fun=Agg())\nGiven the path to a single audio file, return a candidates track object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the audio file\nrequired\n\n\nxmin\nfloat\nStart time to process the audio. Defaults to 0.\n0\n\n\nxmax\nfloat\nEnd tome for processing audio. If None, defaults to the maximum time. Defaults to None.\nNone\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nCandidateTracks\nA CandidateTracks object to use."
  },
  {
    "objectID": "reference/process_audio_file.html#parameters",
    "href": "reference/process_audio_file.html#parameters",
    "title": "process_audio_file",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr | Path\nPath to the audio file\nrequired\n\n\nxmin\nfloat\nStart time to process the audio. Defaults to 0.\n0\n\n\nxmax\nfloat\nEnd tome for processing audio. If None, defaults to the maximum time. Defaults to None.\nNone\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()"
  },
  {
    "objectID": "reference/process_audio_file.html#returns",
    "href": "reference/process_audio_file.html#returns",
    "title": "process_audio_file",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nCandidateTracks\nA CandidateTracks object to use."
  },
  {
    "objectID": "usage/all_arguments.html",
    "href": "usage/all_arguments.html",
    "title": "All FastTrack Options",
    "section": "",
    "text": "Instead of needing to include every option you wish to cusotomize as a command line entry, you can set them in a config file, and pass it to the fasttrack command with config. For example\n# config.yml file\naudio: speaker.wav\ntextgrid: speaker.TextGrid\ndest: results\nentry_classes: SequenceInterval\ntarget_tier: phones\ntarget_labels: \"..1\"\nsmoother_order: 6\n# at the command line: \nfasttrack audio-textgrid --config config.yml"
  },
  {
    "objectID": "usage/all_arguments.html#use-of-a-config-file",
    "href": "usage/all_arguments.html#use-of-a-config-file",
    "title": "All FastTrack Options",
    "section": "",
    "text": "Instead of needing to include every option you wish to cusotomize as a command line entry, you can set them in a config file, and pass it to the fasttrack command with config. For example\n# config.yml file\naudio: speaker.wav\ntextgrid: speaker.TextGrid\ndest: results\nentry_classes: SequenceInterval\ntarget_tier: phones\ntarget_labels: \"..1\"\nsmoother_order: 6\n# at the command line: \nfasttrack audio-textgrid --config config.yml"
  },
  {
    "objectID": "usage/all_arguments.html#command-specific-options",
    "href": "usage/all_arguments.html#command-specific-options",
    "title": "All FastTrack Options",
    "section": "Command specific options",
    "text": "Command specific options\n\nJust Audio Options\n\n\n\nOption\nMeaning\n\n\n\n\nfile\nA single audio file to process\n\n\ndir\nA directory of audio files to process\n\n\n\n\n\nAudio + TextGrid Options\n\n\n\nOption\nMeaning\n\n\n\n\naudio\nPath to an audio file to process\n\n\ntextgrid\nPath to a textgrid to process"
  },
  {
    "objectID": "usage/all_arguments.html#shared-options",
    "href": "usage/all_arguments.html#shared-options",
    "title": "All FastTrack Options",
    "section": "Shared Options",
    "text": "Shared Options\nThe Following options are general across most fasttrack commands.\n\nOutput Destinations\n\n\n\nOption\nMeaning\n\n\n\n\noutput\nOutput file name\n\n\ndest\nOutput directory\n\n\n\nIf an output file name is not provided, fasttrack will try to use a reasonable name based on the input audio file name.\n\n\nOutput Options\n\n\n\n\n\n\n\n\nOption\nMeaning\nDefault\n\n\n\n\nwhich_output\nWhether to save just the winning track (winner) or all candidates (all)\nwinner\n\n\ndata_output\nWhether to save the formant tracks (formants) or the smoothing parameters (param)\nformants\n\n\n\n\n\nTextGrid Processing Options\n\n\n\n\n\n\n\n\nOption\nMeaning\nDefault\n\n\n\n\nentry_classes\nFormat of the TextGrid.\n\"Word|Phone\"\n\n\ntarget_tier\nThe tier to target for processing\nPhone\n\n\ntarget_labels\nA regex for the labels to target for processing\n\"[AEIOU]\"\n\n\n\n\nNotes:\n\nIf your textgrid is not the output of a forced-aligner, change the entry_classes value to SequenceInterval and the value of target_tier to whatever the tier name is that you want to process.\nAny string that can be interpreted as a regular expression can be passed to processing.\n\n\n\n\nAudio Processing Options\n\n\n\n\n\n\n\n\nOption\nMeaning\nDefault\n\n\n\n\nmin_duration\nThe minumum duration segment to analyze\n0.05 (s)\n\n\nmin_max_formant\nThe lowest maximum formant to try\n4000(hz)\n\n\nmax_max_formant\nThe highest maximum formant to try\n7000(hz)\n\n\nnstep\nThe number of steps between the lowest and the highest maximum formant\n20\n\n\nn_formants\nThe number of formants to try to track in the audio\n4\n\n\nwindow_length\nThe formant analysis window length\n0.025 (s)\n\n\ntime_step\nThe formant analysis step size\n0.002 (s)\n\n\npre_emphasis_from\nPre-emphasis to be applied before formant tracking\n50 (hz)\n\n\n\n\n\nSmoother Options\n\n\n\n\n\n\n\n\nOption\nMeaning\nDefault\n\n\n\n\nsmoother_method\nThe smoothing method to use. It’s not recommended you change this from the default.\ndct_smooth_regression\n\n\nsmoother_order\nThe “order” of the smooth. More is wigglier.\n5\n\n\nloss_method\nMethod for calculating the error between the smooth and measured formants. It’s not recommended that you change the default\nlmse"
  },
  {
    "objectID": "usage/getting_started.html",
    "href": "usage/getting_started.html",
    "title": "Quickstart",
    "section": "",
    "text": "After installing fasttrackpy, you can use the fasttrack commandline executable. For a full list of all settable options, see All FastTrack Options"
  },
  {
    "objectID": "usage/getting_started.html#audio-file-only-processing",
    "href": "usage/getting_started.html#audio-file-only-processing",
    "title": "Quickstart",
    "section": "Audio File Only Processing",
    "text": "Audio File Only Processing\nYou can process either a single audio file or a directory of audio files with fasttrack audio. To use the fasttrack defaults, just provide fasttrack audio with the path to the input file or directory, and an output file or directory.\nfasttrack audio --file assets/audio/ay.wav --dest assets/audio\nThis will save the formant tracks for this single wav file to assets/audio/ay.csv/.\nTo process an entire directory of files, instead pass the directory to --dir.\nfasttrack audio --dir assets/audio/ --dest assets/audio\nThis will save the formant tracks for each audio file with the same file name to the output directory."
  },
  {
    "objectID": "usage/getting_started.html#audio-file-textgrid-processing",
    "href": "usage/getting_started.html#audio-file-textgrid-processing",
    "title": "Quickstart",
    "section": "Audio File + TextGrid Processing",
    "text": "Audio File + TextGrid Processing\nYou can process an audio file + textgrid combination with fasttrack audio-textgrid. The defaults assume you are passing a textgrid with a Word and Phone tier from forced alignment, but this can be overriden.\nfasttrack audio-textgrid --audio speaker.wav \\\n    --textgrid speaker.TextGrid \\\n    --dest output\n\nAdjusting the assumed TextGrid format\nIf your textgrid is not formatted as force aligned textgrid, you need to pass --textgrid-format the value SequenceInterval and --target-tier the name of the tier you want to analyze.\nfasttrack audio-textgrid --audio speaker.wav \\\n    --textgrid speaker.TextGrid \\\n    --dest output \\\n    --textgrid-format SequenceInterval \\\n    --target-tier phones\n\n\nAdjusting the target intervals\nYou can configure fasttrack to only process certain intervals by passing --target-labels a regular expression matching values in your textgrid. For example, if you have segmented only the vowels you want to analyze, you can pass --target-labels the value \".\".\nfasttrack audio-textgrid --audio speaker.wav \\\n    --textgrid speaker.TextGrid \\\n    --dest output \\\n    --textgrid-format SequenceInterval \\\n    --target-tier phones \\\n    --target-labels \".\""
  },
  {
    "objectID": "usage/getting_started.html#using-a-config-file",
    "href": "usage/getting_started.html#using-a-config-file",
    "title": "Quickstart",
    "section": "Using a config file",
    "text": "Using a config file\nThere are many possible options to set for both fasttrack audio and fasttrack audio-textgrid. Instead of passing them all at the commandline, you can pass either command a yaml config file.\n# config.yml\nmin_max_formant: 3000\nmax_max_formant: 6000\nnstep: 10\nfasttrack audio --file ay.wav \\\n    --dest output \\\n    --config config.yml"
  },
  {
    "objectID": "usage/pythonic_use.html",
    "href": "usage/pythonic_use.html",
    "title": "Pythonic Use",
    "section": "",
    "text": "Here, we’ll outline how to use fasttrackpy functions and classes either in an interactive notebook, or within your own package.\nimport IPython\nfrom fasttrackpy import process_audio_file, \\\n    process_directory, \\\n    process_audio_textgrid\nfrom pathlib import Path"
  },
  {
    "objectID": "usage/pythonic_use.html#function-use",
    "href": "usage/pythonic_use.html#function-use",
    "title": "Pythonic Use",
    "section": "Function use",
    "text": "Function use\nThe easiest way to start using fasttrackpy directly will be by calling one of the process_* functions, which will either return a single CandidateTracks object, or a list of CandidateTracks objects.\n\nProcess an audio file\nYou can process an audio file, and adjust the relevant settings with process_audio().\n\naudio_path = Path(\"..\", \"assets\", \"audio\", \"ay.wav\")\nIPython.display.Audio(audio_path)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\ncandidates = process_audio_file(\n    path=audio_path,\n    min_max_formant=3000,\n    max_max_formant=6000\n    )\n\n\nInspecting the candidates object.\nThere are a few key attributes you can get from the candidates object, including\n\nThe error terms for each smooth.\nThe winning candidate\n\n\ncandidates.smooth_errors\n\narray([0.16235304, 0.14485463, 0.11256701, 0.10289698, 0.04123212,\n       0.02603178, 0.0234309 , 0.01443734, 0.0057591 , 0.00570674,\n       0.00607839, 0.00638171, 0.02082114, 0.08069398, 0.25765617,\n       0.29185815, 0.29258252, 0.40084923, 0.40984752, 0.40401117])\n\n\n\ncandidates.winner\n\nA formant track object. (4, 385)\n\n\n\n\nInspecting the candidates.winner object\nThe candidates.winner object has a few useful attributes to access as well, including the maximum formant.\n\ncandidates.winner.maximum_formant\n\n4421.0526315789475\n\n\n\n\nData output - Spectrograms\nYou can get a spectrogram plot out of either the candidates.winner or the candidates itself.\n\ncandidates.winner.spectrogram()\n\n\n\n\n\ncandidates.spectrograms()\n\n\n\n\n\n\nData Output - DataFrames\nYou can output the candidates to a polars dataframe.\n\ncandidates.to_df(which = \"winner\").head()\n\n\nshape: (5, 12)\n\n\n\nF1\nF2\nF3\nF1_s\nF2_s\nF3_s\nerror\ntime\nmax_formant\nn_formant\nsmooth_method\nfile_name\n\n\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\ni32\nstr\nstr\n\n\n\n\n617.272605\n1176.964097\n2632.331756\n649.132826\n1199.468112\n2628.146318\n0.005707\n0.025406\n4421.052632\n4\n\"dct_smooth_reg…\n\"ay.wav\"\n\n\n630.420943\n1187.765544\n2629.821409\n649.133302\n1199.48594\n2628.148747\n0.005707\n0.027406\n4421.052632\n4\n\"dct_smooth_reg…\n\"ay.wav\"\n\n\n643.400508\n1205.737273\n2628.578009\n649.134733\n1199.539408\n2628.156024\n0.005707\n0.029406\n4421.052632\n4\n\"dct_smooth_reg…\n\"ay.wav\"\n\n\n654.617466\n1227.992762\n2628.546392\n649.137128\n1199.628468\n2628.168109\n0.005707\n0.031406\n4421.052632\n4\n\"dct_smooth_reg…\n\"ay.wav\"\n\n\n663.407614\n1247.916415\n2629.163965\n649.140502\n1199.753041\n2628.184942\n0.005707\n0.033406\n4421.052632\n4\n\"dct_smooth_reg…\n\"ay.wav\""
  },
  {
    "objectID": "usage/pythonic_use.html#processing-an-audio-textgrid-combination.",
    "href": "usage/pythonic_use.html#processing-an-audio-textgrid-combination.",
    "title": "Pythonic Use",
    "section": "Processing an Audio + TextGrid combination.",
    "text": "Processing an Audio + TextGrid combination.\nTo process a combination of an audio + textgrid, you can use the process_audio_textgrid() function. There are a few more options to add here related to textgrid processing.\n\nTextGrid Processing\n\nentry_classes\nfasttrackpy uses aligned-textgrid to process TextGrids. By default, it will assume your textgrid is formatted as the output of forced alignment with a Word and Phone tier. If your textgrid doesn’t have these tiers, you can pass entry_classes [SequenceInterval] instead.\n\n\ntarget_tier\nYou need to lest process_audio_textgrid() know which tier(s) to process, either by telling it which entry class to target (defaults to \"Phone\") or by the name of the tier.\n\n\ntarget_labels\nTo process only specific textgrid intervals (say, the vowels), you can pass target_labels a regex string that will match the labels of intervals.\n\n\n\nRunning the processing\n\nspeaker_audio = Path(\"..\", \"assets\" , \"corpus\", \"josef-fruehwald_speaker.wav\")\nspeaker_textgrid = Path(\"..\", \"assets\", \"corpus\", \"josef-fruehwald_speaker.TextGrid\")\n\n\nall_vowels = process_audio_textgrid(\n    audio_path=speaker_audio,\n    textgrid_path=speaker_textgrid,\n    entry_classes=[\"Word\", \"Phone\"],\n    target_tier=\"Phone\",\n    # just stressed vowels\n    target_labels=\"[AEIOU].1\",\n    min_duration=0.05,\n    min_max_formant=3000,\n    max_max_formant=6000,\n    n_formants=4\n)\n\n  0%|          | 0/174 [00:00&lt;?, ?it/s]100%|██████████| 174/174 [00:07&lt;00:00, 23.47it/s]\n\n\n\n\nInspecting the results\nThe all_vowels object is a list of CandidateTracks. Each candidate track object has the same attributes discussed above, but a few additional values added from the textgrid interval.\n\nThe SequenceInterval object\nYou can access the aligned-textgrid.SequenceInterval itself, and its related attributes.\n\nall_vowels[0].interval.label\n\n'AY1'\n\n\n\nall_vowels[0].interval.fol.label\n\n'K'\n\n\n\nall_vowels[0].interval.inword.label\n\n'strikes'\n\n\n\n\nLabels & Ids\nInterval properties also get added to the CandidateTracks object itself, including .label, which contains the interval label, and .id, which contains a unique id for the interval within the textgrid.\n\n[all_vowels[0].label,\n all_vowels[0].id]\n\n['AY1', '0-0-4-3']\n\n\n\n\nOutputting to a dataframe.\nIn order to output the results to one large dataframe. You’ll have to use polars.concat().\n\nimport polars as pl\nimport plotly.express as px\n\n\nall_df = [vowel.to_df() for vowel in all_vowels]\nbig_df = pl.concat(all_df, how=\"diagonal\")\n\n\nbig_df.shape\n\n(8012, 15)\n\n\n\nmax_formants = big_df\\\n    .group_by([\"id\", \"label\"])\\\n    .agg(\n        pl.col(\"max_formant\").mean()\n    )\n\n\nfig = px.violin(max_formants, y = \"max_formant\", points=\"all\")\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "These are the docs for fasttrackpy"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Home",
    "section": "Installation",
    "text": "Installation\nYou can install fasttrackpy with pip.\npip install fasttrackpy\nIn addition to making the python modules available, this will also make the fasttrack command line executable available."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Home",
    "section": "Usage",
    "text": "Usage\nThe fasttrack executable has two commands\nfasttrack audio ...\nand\nfasttrack audio-textgrid ...\nFore more info, see the quickstart."
  },
  {
    "objectID": "reference/process_audio_textgrid.html",
    "href": "reference/process_audio_textgrid.html",
    "title": "process_audio_textgrid",
    "section": "",
    "text": "process_audio_textgrid(audio_path, textgrid_path, entry_classes=['Word', 'Phone'], target_tier='Phone', target_labels='[AEIOU]', min_duration=0.05, min_max_formant=4000, max_max_formant=7000, nstep=20, n_formants=4, window_length=0.025, time_step=0.002, pre_emphasis_from=50, smoother=Smoother(), loss_fun=Loss(), agg_fun=Agg())\nProcess an audio and TextGrid file together.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naudio_path\nstr | Path\nPath to an audio file.\nrequired\n\n\ntextgrid_path\nstr | Path\nPath to a TextGrid\nrequired\n\n\nentry_classes\nlist\ndescription. Defaults to [“Word”, “Phone”].\n['Word', 'Phone']\n\n\ntarget_tier\nstr\ndescription. Defaults to “Phone”.\n'Phone'\n\n\ntarget_labels\nstr\ndescription. Defaults to “[AEIOU]”.\n'[AEIOU]'\n\n\nmin_duration\nfloat\ndescription. Defaults to 0.05.\n0.05\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[CandidateTracks]\nA list of candidate tracks."
  },
  {
    "objectID": "reference/process_audio_textgrid.html#parameters",
    "href": "reference/process_audio_textgrid.html#parameters",
    "title": "process_audio_textgrid",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\naudio_path\nstr | Path\nPath to an audio file.\nrequired\n\n\ntextgrid_path\nstr | Path\nPath to a TextGrid\nrequired\n\n\nentry_classes\nlist\ndescription. Defaults to [“Word”, “Phone”].\n['Word', 'Phone']\n\n\ntarget_tier\nstr\ndescription. Defaults to “Phone”.\n'Phone'\n\n\ntarget_labels\nstr\ndescription. Defaults to “[AEIOU]”.\n'[AEIOU]'\n\n\nmin_duration\nfloat\ndescription. Defaults to 0.05.\n0.05\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()"
  },
  {
    "objectID": "reference/process_audio_textgrid.html#returns",
    "href": "reference/process_audio_textgrid.html#returns",
    "title": "process_audio_textgrid",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[CandidateTracks]\nA list of candidate tracks."
  },
  {
    "objectID": "reference/Loss.html",
    "href": "reference/Loss.html",
    "title": "Loss",
    "section": "",
    "text": "Loss(self, method='lmse', **kwargs)\nsummary\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\ndescription. Defaults to “lmse”.\n'lmse'"
  },
  {
    "objectID": "reference/Loss.html#parameters",
    "href": "reference/Loss.html#parameters",
    "title": "Loss",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\ndescription. Defaults to “lmse”.\n'lmse'"
  },
  {
    "objectID": "reference/processors.losses.mse.html",
    "href": "reference/processors.losses.mse.html",
    "title": "processors.losses.mse",
    "section": "",
    "text": "processors.losses.mse(formants, smoothed, axis=1)\nsummary\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nnp.ndarray\ndescription\nrequired\n\n\nsmoothed\nnp.ndarray\ndescription\nrequired\n\n\naxis\nint\ndescription. Defaults to 1.\n1\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnp.ndarray\nnp.ndarray: description"
  },
  {
    "objectID": "reference/processors.losses.mse.html#parameters",
    "href": "reference/processors.losses.mse.html#parameters",
    "title": "processors.losses.mse",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nformants\nnp.ndarray\ndescription\nrequired\n\n\nsmoothed\nnp.ndarray\ndescription\nrequired\n\n\naxis\nint\ndescription. Defaults to 1.\n1"
  },
  {
    "objectID": "reference/processors.losses.mse.html#returns",
    "href": "reference/processors.losses.mse.html#returns",
    "title": "processors.losses.mse",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnp.ndarray\nnp.ndarray: description"
  },
  {
    "objectID": "reference/processors.smoothers.Smoothed.html",
    "href": "reference/processors.smoothers.Smoothed.html",
    "title": "processors.smoothers.Smoothed",
    "section": "",
    "text": "processors.smoothers.Smoothed(self, smoothed, params=None)\nSmooothed formant tracks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsmoothed\nnp.ndarray\na (formants, time) shaped numpy array of smoothed formant values\nrequired\n\n\nparams\nnp.ndarray\nParameters (if any) of the smoother. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/processors.smoothers.Smoothed.html#parameters",
    "href": "reference/processors.smoothers.Smoothed.html#parameters",
    "title": "processors.smoothers.Smoothed",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsmoothed\nnp.ndarray\na (formants, time) shaped numpy array of smoothed formant values\nrequired\n\n\nparams\nnp.ndarray\nParameters (if any) of the smoother. Defaults to None.\nNone"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth_regression.html",
    "href": "reference/processors.smoothers.dct_smooth_regression.html",
    "title": "processors.smoothers.dct_smooth_regression",
    "section": "",
    "text": "processors.smoothers.dct_smooth_regression(x, order=5)\nA DCT Smoother using regression\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\nA 1D array to smooth\nrequired\n\n\norder\nint\nOrder of the DCT smoother. Defaults to 5.\n5\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSmoothed\nSee smoothed"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth_regression.html#parameters",
    "href": "reference/processors.smoothers.dct_smooth_regression.html#parameters",
    "title": "processors.smoothers.dct_smooth_regression",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\nnp.array\nA 1D array to smooth\nrequired\n\n\norder\nint\nOrder of the DCT smoother. Defaults to 5.\n5"
  },
  {
    "objectID": "reference/processors.smoothers.dct_smooth_regression.html#returns",
    "href": "reference/processors.smoothers.dct_smooth_regression.html#returns",
    "title": "processors.smoothers.dct_smooth_regression",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nSmoothed\nSee smoothed"
  },
  {
    "objectID": "reference/Agg.html",
    "href": "reference/Agg.html",
    "title": "Agg",
    "section": "",
    "text": "Agg(self, method='agg_sum', **kwargs)\nsummary\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\ndescription. Defaults to “agg_sum”.\n'agg_sum'"
  },
  {
    "objectID": "reference/Agg.html#parameters",
    "href": "reference/Agg.html#parameters",
    "title": "Agg",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nmethod\nUnion[str, Callable]\ndescription. Defaults to “agg_sum”.\n'agg_sum'"
  },
  {
    "objectID": "reference/CandidateTracks.html",
    "href": "reference/CandidateTracks.html",
    "title": "CandidateTracks",
    "section": "",
    "text": "CandidateTracks(self, sound, min_max_formant=4000, max_max_formant=7000, nstep=20, n_formants=4, window_length=0.025, time_step=0.002, pre_emphasis_from=50, smoother=Smoother(), loss_fun=Loss(), agg_fun=Agg())\nA class for candidate tracks for a single formant\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsound\npm.Sound\nA parselmouth.Sound object.\nrequired\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncandidates\nlist[OneTrack, …]\nA list of OneTrack tracks.\n\n\nmin_n_measured\nint\nThe smallest number of successfully measured formants across all candidates\n\n\nsmooth_errors\nnp.array\nThe error terms for each treack in candidates\n\n\nwinner_idx\nint\nThe candidate track with the smallest error term\n\n\nwinner\nOneTrack\nThe winning OneTrack track.\n\n\nfile_name\nstr\nThe filename of the audio file, if set.\n\n\ninterval\naligned_textgrid.SequenceInterval\nThe textgrid interval of the sound, if set.\n\n\nid\nstr\nThe interval id of the sound, if set.\n\n\ngroup\nstr\nThe tier group name of the sound, if set.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nspectrograms\nGenerate a spectrogram with formant tracks for the candidate tracks\n\n\nto_df\nReturn a polars dataframe of the candidate tracks\n\n\n\n\n\nCandidateTracks.spectrograms(**kwargs)\nGenerate a spectrogram with formant tracks for the candidate tracks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nint\nNumber of formants to plot. Defaults to 3.\nrequired\n\n\nmaximum_frequency\nint\nMaximum frequency for the spectrogram. Defaults to 3500.\nrequired\n\n\ntracks\nbool\nWhether or not to plot the tracks. Defaults to True.\nrequired\n\n\ndynamic_range\nint\nDynamic range of the spectrogram. Defaults to 60.\nrequired\n\n\nfigsize\ntuple\nFigure size. Defaults to (12,8).\nrequired\n\n\n\n\n\n\n\nCandidateTracks.to_df(which='winner', output='formants')\nReturn a polars dataframe of the candidate tracks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwhich\nLiteral[‘winner’, ‘all’]\nReturn just the winner track data, or all candidates. Defaults to “winner”.\n'winner'\n\n\noutput\nLiteral[‘formants’, ‘param’]\nWhether to output the formants or the smoothing parameters. Defaults to “formants”.\n'formants'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA polars.DataFrame"
  },
  {
    "objectID": "reference/CandidateTracks.html#parameters",
    "href": "reference/CandidateTracks.html#parameters",
    "title": "CandidateTracks",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsound\npm.Sound\nA parselmouth.Sound object.\nrequired\n\n\nmin_max_formant\nfloat\nThe lowest max-formant value to try. Defaults to 4000.\n4000\n\n\nmax_max_formant\nfloat\nThe highest max formant to try. Defaults to 7000.\n7000\n\n\nnstep\nint\nThe number of steps from the min to the max max formant. Defaults to 20.\n20\n\n\nn_formants\nint\nThe number of formants to track. Defaults to 4.\n4\n\n\nwindow_length\nfloat\nWindow length of the formant analysis. Defaults to 0.025.\n0.025\n\n\ntime_step\nfloat\nTime step of the formant analyusis window. Defaults to 0.002.\n0.002\n\n\npre_emphasis_from\nfloat\nPre-emphasis threshold. Defaults to 50.\n50\n\n\nsmoother\nSmoother\nThe smoother method to use. Defaults to Smoother().\nSmoother()\n\n\nloss_fun\nLoss\nThe loss function to use. Defaults to Loss().\nLoss()\n\n\nagg_fun\nAgg\nThe loss aggregation function to use. Defaults to Agg().\nAgg()"
  },
  {
    "objectID": "reference/CandidateTracks.html#attributes",
    "href": "reference/CandidateTracks.html#attributes",
    "title": "CandidateTracks",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ncandidates\nlist[OneTrack, …]\nA list of OneTrack tracks.\n\n\nmin_n_measured\nint\nThe smallest number of successfully measured formants across all candidates\n\n\nsmooth_errors\nnp.array\nThe error terms for each treack in candidates\n\n\nwinner_idx\nint\nThe candidate track with the smallest error term\n\n\nwinner\nOneTrack\nThe winning OneTrack track.\n\n\nfile_name\nstr\nThe filename of the audio file, if set.\n\n\ninterval\naligned_textgrid.SequenceInterval\nThe textgrid interval of the sound, if set.\n\n\nid\nstr\nThe interval id of the sound, if set.\n\n\ngroup\nstr\nThe tier group name of the sound, if set."
  },
  {
    "objectID": "reference/CandidateTracks.html#methods",
    "href": "reference/CandidateTracks.html#methods",
    "title": "CandidateTracks",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nspectrograms\nGenerate a spectrogram with formant tracks for the candidate tracks\n\n\nto_df\nReturn a polars dataframe of the candidate tracks\n\n\n\n\n\nCandidateTracks.spectrograms(**kwargs)\nGenerate a spectrogram with formant tracks for the candidate tracks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nformants\nint\nNumber of formants to plot. Defaults to 3.\nrequired\n\n\nmaximum_frequency\nint\nMaximum frequency for the spectrogram. Defaults to 3500.\nrequired\n\n\ntracks\nbool\nWhether or not to plot the tracks. Defaults to True.\nrequired\n\n\ndynamic_range\nint\nDynamic range of the spectrogram. Defaults to 60.\nrequired\n\n\nfigsize\ntuple\nFigure size. Defaults to (12,8).\nrequired\n\n\n\n\n\n\n\nCandidateTracks.to_df(which='winner', output='formants')\nReturn a polars dataframe of the candidate tracks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nwhich\nLiteral[‘winner’, ‘all’]\nReturn just the winner track data, or all candidates. Defaults to “winner”.\n'winner'\n\n\noutput\nLiteral[‘formants’, ‘param’]\nWhether to output the formants or the smoothing parameters. Defaults to “formants”.\n'formants'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA polars.DataFrame"
  }
]